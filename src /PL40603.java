/* PL40603.java */
/* Generated By:JavaCC: Do not edit this line. PL40603.java */
import java.util.Stack;
public class PL40603 implements PL40603Constants {
    private static boolean verbose = false;
    public static int tempNum = 0;
    public static Stack<String > oppStack = new Stack<String >();
    public static Stack<String> stack = new Stack<String>();
    public static Stack<String> whileStack = new Stack<String>();
    public static Stack<String> returnStack = new Stack<String>();
    public static QuadList quads = new QuadList();
    static PL40603 parser;
    public static void main(String args []) throws ParseException
    {
        parser = new PL40603(System.in);
    parser.Input();
    quads.print();

    }
    //expression: semantics
    public static String newTemp() {
        tempNum++;
        return "~T"+tempNum;
    }

    static void expressionSem1(String opp) {
//    System.out.println("expressionSem1");
    String A = stack.pop().trim();
    String B = stack.pop().trim();
    String C = newTemp();
    quads.genQuad(opp, A, B , C);
    stack.push(C);
  }

    static void assignSem1() {
      if (verbose) System.out.println("AssignSem1");
    String A = stack.pop().trim();
    String B = stack.pop().trim();
    quads.genQuad("=",A," ", B);
    stack.push(A);
    }
    static void unarySem1() {
    String A = stack.pop().trim();
    String opp = oppStack.pop().trim();
    String C = newTemp();
    quads.genQuad(opp, A, " ", C);
    stack.push(C);
    }
  static void conditionalSem1() {
    int A = quads.nextQuad;
    String B = stack.pop().trim();
    quads.genQuad("jeqz",B," ",0+"");
    stack.push(A+"");
  }
  static void conditionalSem2() {
      if (verbose) System.out.println("Sem2");
    int A = quads.nextQuad;
    quads.genQuad("jmp", " ", " ", 0 +"");
    String B = stack.pop().trim();
    quads.setReturn(B,quads.nextQuad);
    stack.push(A + "");
  }
  static void conditionalSem3() {
    String A = stack.pop().trim();
    quads.setReturn(A,quads.nextQuad);
  }
  static void loopSem1() {
    whileStack.push(quads.nextQuad+"");
  }
  static void loopSem2() {
    String A = stack.pop().trim();
    whileStack.push(quads.nextQuad+"");
    quads.genQuad("jeqz",A," ", "0");
  }
  static void loopSem3() {
    String A = whileStack.pop().trim();
    String B = whileStack.pop().trim();
    quads.genQuad("jmp", " ", " ", B);
    quads.backpatch(A, quads.nextQuad);
  }
  static void loopSem4() {
      if (whileStack.isEmpty()) {
         System.out.println("Continue/break outside of loop");
         parser = null;
       }
    else {
      String A = whileStack.pop().trim();
      String B = whileStack.pop().trim();
      whileStack.push(B);
      whileStack.push(A);
      quads.genQuad("jmp", " ", " ", B);
    }
  }
  static void loopSem5() {
      if (whileStack.isEmpty()) {
         System.out.println("Continue/break outside of loop");
         parser = null;
       }
      else {
      String A = whileStack.pop().trim();
      whileStack.push(quads.nextQuad+"");
      quads.genQuad("jmp", " ", " ", A);
    }
  }
  static void ternSem1() {
    String A = quads.nextQuad+"";
    String B = stack.pop().trim();
    stack.push(quads.nextQuad+"");
    quads.genQuad("jeqz",B," ", "0");
  }
  static void ternSem2() {
    String B = stack.pop().trim();
    String A = stack.pop().trim();
    quads.setReturn(A,quads.nextQuad);
    String T = newTemp();
    stack.push(T);
    quads.genQuad("=", B, " ", T);
    stack.push(quads.nextQuad+"");
    quads.genQuad("jmp", " ", " ", "0");
    quads.setReturn(A,quads.nextQuad);
  }
  static void ternSem3() {
    String B = stack.pop().trim();
    String A = stack.pop().trim();
    String T = stack.pop().trim();
    quads.genQuad("=",B," ",T);
    quads.setReturn(A,quads.nextQuad);
    stack.push(T);
  }
  static void forSem1() {
    String A = stack.pop().trim();
    String B = stack.pop().trim();
    quads.genQuad("=",A," ",B);
    whileStack.push(quads.nextQuad+"");
  }
  static void forSem2() {
    whileStack.push(quads.nextQuad+"");
    String A = stack.pop().trim();
    quads.genQuad("jeqz",A," ", "0");
    whileStack.push(quads.nextQuad+""); //addr of jmp to stmt
    quads.genQuad("jmp"," "," ","0");
    whileStack.push(quads.nextQuad +"");    //begining of inc
  }
  static void forSem3() {
    String A = stack.pop().trim();
    String B = stack.pop().trim();
    quads.genQuad("=",A," ",B);

  }
  static void forSem4() {
    String A = whileStack.pop().trim();
    String B = whileStack.pop().trim();
    quads.genQuad("jmp", " "," ",A);
    quads.backpatch(B,quads.nextQuad);
  }
  static void forSem5() {
    String A = whileStack.pop().trim();
    String B = whileStack.pop().trim();
    String C = whileStack.pop().trim();
    String D = whileStack.pop().trim();
    quads.genQuad("jmp"," " ," ", D);
    quads.setReturn(B,quads.nextQuad);
    whileStack.push(C);
    whileStack.push(A);
  }

static void returnSem1() {
  String A = stack.pop();
  returnStack.push(quads.nextQuad+"");
  quads.genQuad("rtr", " "," ", A);
}

//for debugging
    static void printStack(Stack<String> st) {
    Stack<String > st1 = new Stack<String >();
    while (!st.isEmpty()) {
        String s = st.pop();
        st1.push(s);
      System.out.println("- >" + s);
    }
    while(!st1.isEmpty()) {
      st.push(st1.pop());
    }
    }

  final public void Input() throws ParseException {
    program();
  }

  final public void program() throws ParseException {if (verbose) System.out.println("program");
    methodList();
    jj_consume_token(17);
    compound_stmt();
if (verbose) System.out.println("program done");
      quads.genQuad("rtr", " ", " ", 1+"");
  }

  final public void methodList() throws ParseException {if (verbose) System.out.println("MethodList");
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      method();
    }
if (verbose) System.out.println("methodList done");
  }

  final public void method() throws ParseException {if (verbose) System.out.println("Method");
    id();
    jj_consume_token(lparen);
    id();
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(18);
      id();
    }
    jj_consume_token(rparen);
    compound_stmt();
if (verbose) System.out.println("method done");
  }

  final public void compound_stmt() throws ParseException {if (verbose) System.out.println("compund_stmt");
    jj_consume_token(lbrace);
    label_3:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_3;
      }
      stmt();
    }
    jj_consume_token(rbrace);
if (verbose) System.out.println("somp_stmt done");
  }

  final public void stmt() throws ParseException {if (verbose) System.out.println("stmt");
    if (jj_2_5(2)) {
      expression();
      jj_consume_token(19);
stack.pop().trim();
    } else if (jj_2_6(2)) {
      compound_stmt();
    } else if (jj_2_7(2)) {
      jj_consume_token(20);
loopSem1();
      test();
loopSem2();
      stmt();
loopSem3();
    } else if (jj_2_8(2)) {
      jj_consume_token(21);
      jj_consume_token(lparen);
      id();
      jj_consume_token(22);
      condition();
      jj_consume_token(19);
forSem1();
      condition();
      jj_consume_token(19);
forSem2();
      id();
      jj_consume_token(22);
      condition();
      jj_consume_token(rparen);
forSem3();
forSem5();
      stmt();
forSem4();
    } else if (jj_2_9(2)) {
      jj_consume_token(23);
      test();
conditionalSem1();
      stmt();
      if (jj_2_4(2)) {
        jj_consume_token(24);
conditionalSem2();
        stmt();
      } else {
        ;
      }
conditionalSem3();
    } else if (jj_2_10(2)) {
      jj_consume_token(25);
      jj_consume_token(19);
loopSem5();
    } else if (jj_2_11(2)) {
      jj_consume_token(26);
      jj_consume_token(19);
loopSem4();
    } else if (jj_2_12(2)) {
      jj_consume_token(27);
      expression();
      jj_consume_token(19);
returnSem1();
    } else if (jj_2_13(2)) {
      jj_consume_token(19);
if (verbose) System.out.println("stmt done");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void test() throws ParseException {if (verbose) System.out.println("test");
    jj_consume_token(lparen);
    expression();
    jj_consume_token(rparen);
if (verbose) System.out.println("test done");
  }

  final public void expression() throws ParseException {if (verbose) System.out.println("expression");
    if (jj_2_14(2)) {
      id();
      jj_consume_token(22);
      expression();
assignSem1();
    } else if (jj_2_15(2)) {
      condition();
if (verbose) System.out.println("expression done");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condition() throws ParseException {if (verbose) System.out.println("condition");
    disjunction();
    if (jj_2_16(2)) {
ternSem1();
      jj_consume_token(28);
      expression();
      jj_consume_token(29);
ternSem2();
      condition();
ternSem3();
    } else {
      ;
    }
if (verbose) System.out.println("condition done");
  }

  final public void disjunction() throws ParseException {if (verbose) System.out.println("disjunction");
    conjunction();
    if (jj_2_17(2)) {
      jj_consume_token(30);
      disjunction();
expressionSem1("|");
    } else {
      ;
    }
if (verbose) System.out.println("disjunction done");
  }

  final public void conjunction() throws ParseException {if (verbose) System.out.println("conjunction");
    comparison();
    if (jj_2_18(2)) {
      jj_consume_token(31);
      conjunction();
expressionSem1("&");
    } else {
      ;
    }
if (verbose) System.out.println("conjunction done");
  }

  final public void comparison() throws ParseException {if (verbose) System.out.println("comparison");
    relation();
    if (jj_2_19(2)) {
      jj_consume_token(32);
      relation();
expressionSem1("==");
    } else {
      ;
    }
if (verbose) System.out.println("comparison done");
  }

  final public void relation() throws ParseException {if (verbose) System.out.println("relation");
    sum();
    label_4:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_4;
      }
      rel_op();
      sum();
if(oppStack.peek().equals("+")) {
                  oppStack.pop();
                  System.out.println("Trimming out the bad +");
          }
      expressionSem1(oppStack.pop().trim());
    }
if (verbose) System.out.println("relation done");
  }

  final public void sum() throws ParseException {if (verbose) System.out.println("sum");
  boolean b = true;
    term();
    label_5:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_22(2)) {
        add_op();
        sum();
expressionSem1(oppStack.pop().trim());
      } else if (jj_2_23(2)) {
        factor2(true);
b = false;
expressionSem1(oppStack.pop().trim());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if (verbose) System.out.println("sum done");
  }

  final public void term() throws ParseException {if (verbose) System.out.println("term");
    if (jj_2_24(2)) {
      factor1();
    } else if (jj_2_25(2)) {
      factor2(false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_6;
      }
      mul_op();
      if (jj_2_27(2)) {
        factor1();
      } else if (jj_2_28(2)) {
        jj_consume_token(lparen);
        factor2(false);
        jj_consume_token(rparen);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
expressionSem1(oppStack.pop().trim());
    }
if (verbose) System.out.println("term done");
  }

  final public void factor2(boolean cameFromSum) throws ParseException {
    jj_consume_token(MINUS);

    primary();
String A = stack.pop();
        String T = newTemp();
        quads.genQuad("-" ,A," ",T);
        stack.push(T);
        if(cameFromSum) {
                oppStack.push("+");
    }
  }

  final public void factor1() throws ParseException {if (verbose) System.out.println("factor1");
  char un;
  Token s = null;
    if (jj_2_29(2)) {
      s = jj_consume_token(33);
    } else {
      ;
    }
    primary();
if(s != null && s.toString().equals("!")) {
          String A = stack.pop();
          String T = newTemp();
          quads.genQuad("!" ,A," ",T);
          stack.push(T);
        } else if(s!=null && s.equals("-")) {
                String A = stack.pop();
            String T = newTemp();
                quads.genQuad("-" ,A," ",T);
                stack.push(T);
        }
  }

  final public void primary() throws ParseException {if (verbose) System.out.println("primary");
    if (jj_2_30(2)) {
      intProd();

    } else if (jj_2_31(2)) {
      id();

    } else if (jj_2_32(2)) {
      jj_consume_token(lparen);
      expression();
      jj_consume_token(rparen);
if (verbose) System.out.println("primary done");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void rel_op() throws ParseException {if (verbose) System.out.println("rel_op");
  Token opp;
    if (jj_2_33(2)) {
      opp = jj_consume_token(34);
    } else if (jj_2_34(2)) {
      opp = jj_consume_token(35);
    } else if (jj_2_35(2)) {
      opp = jj_consume_token(36);
    } else if (jj_2_36(2)) {
      opp = jj_consume_token(37);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
oppStack.push(opp.toString());
                  if (verbose) System.out.println("rel_op done");
  }

  final public void mul_op() throws ParseException {if (verbose) System.out.println("mul_op");
  Token opp;
    if (jj_2_37(2)) {
      opp = jj_consume_token(MULTIPLY);
    } else if (jj_2_38(2)) {
      opp = jj_consume_token(DIVIDE);
    } else if (jj_2_39(2)) {
      opp = jj_consume_token(38);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
oppStack.push(opp.toString());
        if (verbose) System.out.println("mul_op done");
  }

  final public void add_op() throws ParseException {if (verbose) System.out.println("add_op");
  Token opp;
    opp = jj_consume_token(PLUS);
String s = opp.toString();
      oppStack.push(s);
      if (verbose) System.out.println("add_op done");
  }

  final public void unary_op() throws ParseException {if (verbose) System.out.println("unary_op");
  Token opp;
    opp = jj_consume_token(33);
oppStack.push(opp.toString());
      if (verbose) System.out.println("unary_op done");
  }

  final public void id() throws ParseException {if (verbose) System.out.println("id");
    Token t;
    String s = "";
    t = jj_consume_token(LETTER);
s += t.toString();
    label_7:
    while (true) {
      if (jj_2_40(2)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_41(2)) {
        t = jj_consume_token(LETTER);
s += t.toString();
      } else if (jj_2_42(2)) {
        t = jj_consume_token(DIGIT);
s += t.toString();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
stack.push(s.trim());
if (verbose) System.out.println("id done");
  }

  final public void intProd() throws ParseException {if (verbose) System.out.println("intProd");
    Token n;
    int num = 0;
    label_8:
    while (true) {
      n = jj_consume_token(DIGIT);
num = num*10 + Integer.parseInt(n.toString());
      if (jj_2_43(2)) {
        ;
      } else {
        break label_8;
      }
    }
stack.push((num + "").trim());
        if (verbose) System.out.println("Int prod done");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_21()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(DIGIT)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    if (jj_3_43()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(lparen)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(lparen)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(27)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(32)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(LETTER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(24)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(31)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(23)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(DIGIT)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(21)) return true;
    if (jj_scan_token(lparen)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(20)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(lparen)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(28)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(lbrace)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(rbrace)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(18)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(LETTER)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(lparen)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PL40603TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[43];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PL40603(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PL40603(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PL40603TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PL40603(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PL40603TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PL40603(PL40603TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PL40603TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 43; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
